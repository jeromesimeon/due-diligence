/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

namespace org.trustblocks.dueDiligence

import org.accordproject.cicero.runtime.*
import org.accordproject.signature.ContractSigned
import org.accordproject.payment.PaymentReceived


contract DueDiligence over DueDiligenceContract state 
  DueDiligenceStatus {

    // Set the Initial State

    clause init(request: Request) : Response {
             set state DueDiligenceStatus {
                stateID: "1",
                status: "UNSIGNED"
              };
    return response{}
    }

    // Buyer adds dueDiligenceDate and dueDiligenceFee then signs state doesn't change

    clause buyerSignature(request: ContractSigned) : Response emits SubmittedOffer {

        emit SubmittedOffer {
            contract: contract,
            dueDiligenceDate: contract.dueDiligenceDate,
            dueDiligenceFee: contract.dueDiligenceFee,
            buyerSignature: contract.buyerSignature,
            buyerSignatureDate: contract.buyerSignatureDate
        };
    return Response{}
  }

  // Buyer requests seller to sign seller's response sets effectiveDate and moves state

      clause sellerSignature(request: ContractSigned) : Response emits AcceptedOffer {
        enforce request.buyerSignature = true
           else throw ErgoErrorResponse{message: "Offer not signed"};
        enforce request.dueDiligenceFee > 0
           else throw ErgoErrorResponse{message: "Due Diligence fee must be greater than zero"};
        enforce request.dueDilignceDate > today
           else throw ErgoErrorResponse{message: "Invalid Date"};
      
        emit AcceptedOffer {
          contract: contract,
          effectiveDate: contract.effectiveDate,
          sellerSignature: contract.sellerSignature,
          sellerSignatureDate: contract.sellerSignatureDate,
         stateID: "2",
         status: "SIGNED"
        };
    return Response{}
   }
  }